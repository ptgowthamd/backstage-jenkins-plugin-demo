# Group Entity: department-engineering
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: department-engineering
  description: Engineering Department responsible for all engineering teams.
spec:
  type: department
  profile:
    displayName: Department of Engineering
    email: engineering@example.com
    picture: https://example.com/images/engineering.png
  members: []
  # Assuming there is no parent group, you can omit or set parent to null
  parent: null
  children:
    - group:team-xyz
---
# User Entity: alice
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: alice
  description: Backend Developer
spec:
  profile:
    displayName: Alice Smith
    email: alice@example.com
    picture: https://example.com/images/alice.png
  memberOf:
    - group:team-xyz
---
# User Entity: bob
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: bob
  description: Backend Developer
spec:
  profile:
    displayName: Bob Johnson
    email: bob@example.com
    picture: https://example.com/images/bob.png
  memberOf:
    - group:team-xyz
---
# Group Entity: team-xyz
apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: team-xyz
  description: Team XYZ responsible for backend services.
  tags:
    - backend
    - team
spec:
  type: team
  profile:
    displayName: Team XYZ
    email: team-xyz@example.com
    picture: https://example.com/images/team-xyz.png
  members:
    - user:alice
    - user:bob
  parent: group:department-engineering
  children: []
---
# System Entity: backend-system
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: backend-system
  description: Backend system supporting core services.
spec:
  owner: group:team-xyz
  domain: default
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: user-management-db
  description: Production PostgreSQL database for the User Management service.
  tags:
    - database
    - postgres
    - production
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/ptgowthamd/backstage-jenkins-plugin-demo
    monitoring.dashboard.url: https://monitoring.example.com/dashboards/db/user-management-db
    documentation.url: https://docs.example.com/databases/user-management-db
    support.contact: team-xyz@example.com
    environment: production
    database.host: db-prod.example.com
    database.port: "5432"
    database.version: "12"
  links:
    - url: https://monitoring.example.com/dashboards/db/user-management-db
      title: Monitoring Dashboard
      icon: dashboard
    - url: https://docs.example.com/databases/user-management-db
      title: Database Documentation
      icon: docs
    - url: https://tickets.example.com/support/db/user-management-db
      title: Support Tickets
      icon: support
spec:
  type: database
  owner: team-xyz
  system: backend-system
  lifecycle: production
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: authentication-api
  description: RESTful API for authentication and authorization services.
  tags:
    - auth
    - api
    - backend
  annotations:
    documentation: url:https://your-techdocs-site.com/docs/authentication-api
spec:
  type: openapi
  lifecycle: production
  owner: team-xyz
  definition: |
    openapi: 3.0.0
    info:
      title: Authentication API
      version: 1.0.0
      description: API for user authentication and authorization.
    servers:
      - url: https://api.yourdomain.com/auth
        description: Production server
    paths:
      /login:
        post:
          summary: Authenticate user and return a JWT token.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "johndoe"
                    password:
                      type: string
                      example: "password123"
                  required:
                    - username
                    - password
          responses:
            '200':
              description: Successful authentication.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            '401':
              description: Invalid credentials.
      /register:
        post:
          summary: Register a new user.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "johndoe"
                    email:
                      type: string
                      example: "johndoe@example.com"
                    password:
                      type: string
                      example: "password123"
                  required:
                    - username
                    - email
                    - password
          responses:
            '201':
              description: User created successfully.
            '400':
              description: Bad request (e.g., missing fields, user already exists).
      /logout:
        post:
          summary: Log out the current user.
          responses:
            '200':
              description: Successful logout.
            '401':
              description: Unauthorized (no valid token provided).
      /users/{id}:
        get:
          summary: Retrieve user information.
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
          responses:
            '200':
              description: User information retrieved.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
            '404':
              description: User not found.
    components:
      securitySchemes:
        BearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT
    security:
      - BearerAuth: []
  relations:
    - type: "ownedBy"
      target: "group:team-xyz"
    - type: "managedBy"
      target: "pipeline:authentication-api-pipeline"
    - type: "deploys"
      target: "deployment:authentication-api-deployment"
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: flask-app-api
  description: RESTful API provided by the Flask application.
  tags:
    - flask
    - api
    - backend
  annotations:
    documentation: url:https://your-techdocs-site.com/docs/flask-app-api
spec:
  type: openapi
  lifecycle: production
  owner: team-xyz
  definition: |
    openapi: 3.0.0
    info:
      title: Flask App API
      version: 1.0.0
    paths:
      /endpoint:
        get:
          summary: Sample endpoint
          responses:
            '200':
              description: Successful response
  relations:
    - type: "ownedBy"  # Existing relationship example
      target: "group:team-xyz"
    - type: "managedBy"  # New CI/CD relationship
      target: "pipeline:flask-app-pipeline"
    - type: "deploys"     # Another possible CI/CD relationship
      target: "deployment:flask-app-deployment"
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: flask-app2-api
  description: RESTful API provided by the Flask application.
  tags:
    - flask
    - api
    - backend
  annotations:
    documentation: url:https://your-techdocs-site.com/docs/flask-app-api
spec:
  type: openapi
  lifecycle: production
  owner: team-xyz
  definition: |
    openapi: 3.0.0
    info:
      title: Flask App API
      version: 1.0.0
    paths:
      /endpoint:
        get:
          summary: Sample endpoint
          responses:
            '200':
              description: Successful response
  relations:
    - type: "ownedBy"  # Existing relationship example
      target: "group:team-xyz"
    - type: "managedBy"  # New CI/CD relationship
      target: "pipeline:flask-app-pipeline"
    - type: "deploys"     # Another possible CI/CD relationship
      target: "deployment:flask-app-deployment"
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: flask-app2
  description: A simple Flask application
  tags:
    - flask
    - python
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/ptgowthamd/backstage-jenkins-plugin-demo
    # github.com/project-slug: your-org/flask-app-repo  # Replace with your actual GitHub org and repo
    jenkins-jobUrl: http://localhost:8080/job/SimplePipeline
    jenkins.io/job-full-name: SimplePipeline
    # If using Jenkins:
    # jenkins.io/job-url: https://jenkins.example.com/job/flask-app/
    # If using GitLab CI/CD:
    # gitlab.com/project-slug: your-org/flask-app-repo
  links:
    - url: http://0.0.0.0:8000
      title: Open Flask App
      icon: dashboard
      type: admin-dashboard
    - url: https://github.com/your-org/flask-app-repo
      title: Source Code
      icon: github
    - url: http://your-flask-app-url.com
      title: Live Application
      icon: link
    - url: https://your-techdocs-site.com/docs/flask-app
      title: Documentation
      icon: docs
    - url: https://your-ci-cd-pipeline.com/job/flask-app
      title: CI/CD Pipeline
      icon: build
    - url: https://your-monitoring-service.com/dashboards/flask-app
      title: Monitoring Dashboard
      icon: dashboard
    - url: https://sentry.io/organizations/your-org/projects/flask-app
      title: Error Tracking
      icon: sentry
    - url: https://your-logging-service.com/logs/flask-app
      title: Logs
      icon: logs
spec:
  type: service
  lifecycle: production
  owner: team-xyz
  system: backend-system
  providesApis:
    - default/flask-app2-api
  consumesApis:
    - default/authentication-api
  dependsOn:
    - resource:user-management-db
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: flask-app
  description: A simple Flask application
  tags:
    - flask
    - python
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/ptgowthamd/backstage-jenkins-plugin-demo
    # github.com/project-slug: your-org/flask-app-repo  # Replace with your actual GitHub org and repo
    jenkins-jobUrl: http://localhost:8080/job/My-GitHub-Pipeline
    jenkins.io/job-full-name: My-GitHub-Pipeline
    # If using Jenkins:
    # jenkins.io/job-url: https://jenkins.example.com/job/flask-app/
    # If using GitLab CI/CD:
    # gitlab.com/project-slug: your-org/flask-app-repo
  links:
    - url: http://0.0.0.0:8000
      title: Open Flask App
      icon: dashboard
      type: admin-dashboard
    - url: https://github.com/your-org/flask-app-repo
      title: Source Code
      icon: github
    - url: http://your-flask-app-url.com
      title: Live Application
      icon: link
    - url: https://your-techdocs-site.com/docs/flask-app
      title: Documentation
      icon: docs
    - url: https://your-ci-cd-pipeline.com/job/flask-app
      title: CI/CD Pipeline
      icon: build
    - url: https://your-monitoring-service.com/dashboards/flask-app
      title: Monitoring Dashboard
      icon: dashboard
    - url: https://sentry.io/organizations/your-org/projects/flask-app
      title: Error Tracking
      icon: sentry
    - url: https://your-logging-service.com/logs/flask-app
      title: Logs
      icon: logs
spec:
  type: service
  lifecycle: production
  owner: team-xyz
  system: backend-system
  providesApis:
    - default/flask-app-api
  consumesApis:
    - default/authentication-api
    - default/flask-app2-api
  dependsOn:
    - resource:user-management-db
    - component:flask-app2
