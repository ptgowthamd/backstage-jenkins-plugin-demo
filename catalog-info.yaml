apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: jenkins-plugin-demo-project
  description: An example of a Backstage application.
  # Example for optional annotations
  # annotations:
  #   github.com/project-slug: backstage/backstage
  #   backstage.io/techdocs-ref: dir:.
  annotations:
    # jenkins-jobUrl: http://localhost:8080/job/SimplePipeline
    # jenkins.io/job-full-name: SimplePipeline
    jenkins-jobUrl: http://localhost:8080/job/My-GitHub-Pipeline
    jenkins.io/job-full-name: My-GitHub-Pipeline
spec:
  type: service
  owner: gowtham@example.com
  lifecycle: experimental
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: jenkins-plugin-demo-project-2
  description: test pipeline-2
  annotations:
    jenkins-jobUrl: http://localhost:8080/job/SimplePipeline
    jenkins.io/job-full-name: SimplePipeline
spec:
  type: service
  owner: gowthamd@example.com
  lifecycle: production
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: your-database
  description: Database server for the Flask application.
  tags:
    - database
    - postgres  # Replace with your database type (e.g., mysql, mongodb)
  annotations:
    backstage.io/techdocs-ref: url:https://your-techdocs-site.com/docs/your-database
    # Add any other annotations relevant to your database resource
spec:
  type: database  # This can be 'database', 'queue', 'cache', etc.
  owner: team-xyz
  system: backend-system
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: flask-app
  description: A simple Flask application
  tags:
    - flask
    - python
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/ptgowthamd/backstage-jenkins-plugin-demo
    # github.com/project-slug: your-org/flask-app-repo  # Replace with your actual GitHub org and repo
    jenkins-jobUrl: http://localhost:8080/job/My-GitHub-Pipeline
    jenkins.io/job-full-name: My-GitHub-Pipeline
    # If using Jenkins:
    # jenkins.io/job-url: https://jenkins.example.com/job/flask-app/
    # If using GitLab CI/CD:
    # gitlab.com/project-slug: your-org/flask-app-repo
  links:
    - url: http://0.0.0.0:8000
      title: Open Flask App
      icon: dashboard
      type: admin-dashboard
    - url: https://github.com/your-org/flask-app-repo
      title: Source Code
      icon: github
    - url: http://your-flask-app-url.com
      title: Live Application
      icon: link
    - url: https://your-techdocs-site.com/docs/flask-app
      title: Documentation
      icon: docs
    - url: https://your-ci-cd-pipeline.com/job/flask-app
      title: CI/CD Pipeline
      icon: build
    - url: https://your-monitoring-service.com/dashboards/flask-app
      title: Monitoring Dashboard
      icon: dashboard
    - url: https://sentry.io/organizations/your-org/projects/flask-app
      title: Error Tracking
      icon: sentry
    - url: https://your-logging-service.com/logs/flask-app
      title: Logs
      icon: logs
spec:
  type: service
  lifecycle: production
  owner: team-xyz
  system: backend-system
  providesApis:
    - default/flask-app-api
  consumesApis:
    - default/authentication-api
    - default/database-api
  dependsOn:
    - resource:your-database
    - component:authentication-service
    - component:example-website  # New dependency added here
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: flask-app-api
  description: RESTful API provided by the Flask application.
  tags:
    - flask
    - api
    - backend
  annotations:
    documentation: url:https://your-techdocs-site.com/docs/flask-app-api
spec:
  type: openapi
  lifecycle: production
  owner: team-xyz
  definition: |
    openapi: 3.0.0
    info:
      title: Flask App API
      version: 1.0.0
    paths:
      /endpoint:
        get:
          summary: Sample endpoint
          responses:
            '200':
              description: Successful response
  relations:
    - type: "ownedBy"  # Existing relationship example
      target: "group:team-xyz"
    - type: "managedBy"  # New CI/CD relationship
      target: "pipeline:flask-app-pipeline"
    - type: "deploys"     # Another possible CI/CD relationship
      target: "deployment:flask-app-deployment"
